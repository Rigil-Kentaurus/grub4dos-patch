--- configure.ac~	2009-01-16 22:58:48.000000000 +0800
+++ configure.ac	2013-08-27 20:33:41.000000000 +0800
@@ -115,6 +115,22 @@ if test "x$ac_cv_prog_gcc" = xyes; then
     if test "x$no_stack_protector_flag" = xyes; then
       STAGE2_CFLAGS="$STAGE2_CFLAGS -fno-stack-protector"
     fi
+    # GCC >= 3.3 supports -fno-reorder-functions; this defends us against
+    # unlikely-to-be-executed functions being linked before _start with GCC
+    # >= 4.6.
+    AC_CACHE_CHECK([whether gcc has -fno-reorder-functions],
+		   no_reorder_functions_flag, [
+      saved_CFLAGS=$CFLAGS
+      CFLAGS="-fno-reorder-functions"
+      AC_TRY_COMPILE(,
+		     ,
+		     no_reorder_functions_flag=yes,
+		     no_reorder_functions_flag=no)
+      CFLAGS=$saved_CFLAGS
+    ])
+    if test "x$no_reorder_functions_flag" = xyes; then
+      STAGE2_CFLAGS="$STAGE2_CFLAGS -fno-reorder-functions"
+    fi
   fi
 fi
 
@@ -153,6 +169,17 @@ if test "x$undef_flag" = xyes; then
   CPPFLAGS="$CPPFLAGS -Wundef"
 fi
 
+# Check if build ID can be disabled in the linker
+AC_MSG_CHECKING([whether linker accepts `--build-id=none'])
+save_LDFLAGS="$LDFLAGS"
+LDFLAGS="$LDFLAGS -Wl,--build-id=none"
+AC_TRY_LINK(, , build_id_flag=yes, build_id_flag=no)
+AC_MSG_RESULT([$build_id_flag])
+LDFLAGS="$save_LDFLAGS"
+if test "x$build_id_flag" = xyes; then
+  LDFLAGS="$LDFLAGS -Wl,--build-id=none"
+fi
+
 if test "x$with_binutils" != x; then
 dnl  AC_PATH_TOOL(OBJCOPY, objcopy, , "$with_binutils:$PATH")
   AC_PATH_PROG(OBJCOPY, objcopy, , "$with_binutils:$PATH")
